@page "/"
@using LifeTgBotChecker.Data
@inject LifeCheckBotsService CheckerService
@inject DataBase DB
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>General</PageTitle>

<h1 class="page-title">Life Check Tg Bots</h1>

<table class="main-table">
    <tbody>
        <tr>
            <td class="bots-column">
                <div class="flex-container">
                    @foreach (var bot in CheckerService.Bots)
                    {
                        <div class="flex-item" @onclick="() => HandleBotClick(bot.Key)">
                            <div class="bot-info" style="background-color: @bot.Value.Color; width: 100%;">
                                <div class="bot-name">@bot.Value.Name</div>
                                <div class="bot-status">@bot.Value.IsLife</div>
                                <div class="bot-workload">@bot.Value.Workload</div>
                            </div>
                            <button class="btn-del" @onclick="() => HandleDeleteBot(bot.Key)" @onclick:stopPropagation="true">del</button>
                        </div>
                    }
                </div>
            </td>
            <td class="settings-column">
                <div class="settings-container">
                    <div class="setting-item">
                        <p class="input-settings">Промежуток между проверками (мл. сек.)</p>
                        <input @bind="CheckerService.KdMilliSecCheck" />
                    </div>
                    <div class="setting-item">
                        <p class="input-settings">Получаемая длина очереди у ботов</p>
                        <input @bind="CheckerService.MaxGetWorkloadFromBot" />
                    </div>
                    <div class="setting-item">
                        <p class="input-settings">Максимальное количество действий бота в сек.</p>
                        <input @bind="CheckerService.MaxAnswersInSecFromCheckerBot" />
                    </div>
                    <div class="setting-item">
                        <p class="input-settings">Время до начала проверки после отправки сообщения (мл. сек.)</p>
                        <input @bind="CheckerService.KdMilliSecCheckAfterSendMessage" />
                    </div>
                    <div class="setting-item">
                        <p class="input-settings">Время до повторной проверки после первой (мл. сек.)</p>
                        <input @bind="CheckerService.KdMilliSecCheckAfterFirstCheck" />
                    </div>
                    <div class="setting-item">
                        <p class="input-settings">Токен проверяющего бота</p>
                        <input @bind="CheckerService.TokenCheckerBot" type="password" />
                    </div>
                    <div class="settings-buttons">
                        <button class="btn-action" @onclick="SaveInDataBase">Save</button>
                        <button class="btn-action" @onclick="Backup">Backup</button>
                    </div>
                </div>
            </td>
        </tr>
    </tbody>
</table>

<!-- Модальное окно для редактирования бота -->
@if (showModal && selectedBot != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Редактирование бота</h3>
                <button class="modal-close" @onclick="CloseModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="modal-input-group">
                    <label class="modal-label">Название бота:</label>
                    <input class="modal-input" @bind="selectedBotName" />
                </div>
                <div class="modal-input-group">
                    <label class="modal-label">Токен бота:</label>
                    <input class="modal-input" @bind="selectedBotToken" type="password" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-action btn-cancel" @onclick="CloseModal">Отмена</button>
                <button class="btn-action btn-save" @onclick="SaveBotChanges">Сохранить</button>
            </div>
        </div>
    </div>
}

<div class="fixed-bottom">
    <input class="input-token" placeholder="Введите токен" @onkeydown="AddBotFromKeyboard" @bind="inputTokenBot" />
    <button class="btn-add" @onclick="AddBot">Add</button>
</div>

@code {
    private string inputTokenBot = "";
    private bool showModal = false;
    private string? selectedBotKey;
    private string selectedBotName = "";
    private string selectedBotToken = "";

    protected override void OnInitialized()
    {
        CheckerService.OnUpdateUIEvent += HandleChange;
    }

    private async Task HandleChange()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void HandleDeleteBot(string token)
    {
        CheckerService.RemoveBot(token);
    }

    private void HandleBotClick(string token)
    {
        if (CheckerService.Bots.TryGetValue(token, out var bot))
        {
            selectedBotKey = token;
            selectedBotName = bot.Name ?? "Бот";
            selectedBotToken = token;
            showModal = true;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedBotKey = null;
        selectedBotName = "";
        selectedBotToken = "";
    }

    private void SaveBotChanges()
    {
        if (!string.IsNullOrWhiteSpace(selectedBotKey) &&
            !string.IsNullOrWhiteSpace(selectedBotToken))
        {
            // Если токен изменился, нужно обновить бота
            if (selectedBotKey != selectedBotToken)
            {
                CheckerService.RemoveBot(selectedBotKey);
                CheckerService.AddBot(selectedBotToken, selectedBotName);
            }
            // Если изменилось только имя, обновляем его
            else if (CheckerService.Bots.ContainsKey(selectedBotKey))
            {
                CheckerService.RemoveBot(selectedBotKey);
                CheckerService.AddBot(selectedBotKey, selectedBotName);
            }

            CloseModal();
        }
    }

    public void Dispose()
    {
        CheckerService.OnUpdateUIEvent -= HandleChange;
    }

    private async Task HandlerCheckLife(MouseEventArgs args)
    {
        await CheckerService.CheckLifeBots();
    }

    private async Task Backup()
    {
        string url = Navigation.ToAbsoluteUri("api/filebackup").ToString();
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task SaveInDataBase()
    {
        CheckerService.RefreshTokenCheckerBot();

        var settings = await DB.GetSettings();
        if (settings != null)
        {
            settings.TokenCheckerBot = CheckerService.TokenCheckerBot;
            settings.MaxAnswersInSecFromCheckerBot = CheckerService.MaxAnswersInSecFromCheckerBot;
            settings.MaxGetWorkloadFromBot = CheckerService.MaxGetWorkloadFromBot;
            settings.KdMilliSecCheck = CheckerService.KdMilliSecCheck;
            settings.KdMilliSecCheckAfterFirstCheck = CheckerService.KdMilliSecCheckAfterFirstCheck;
            settings.KdMilliSecCheckAfterSendMessage = CheckerService.KdMilliSecCheckAfterSendMessage;
        }
        else
        {

        }

        await DB.Save();
    }

    private void AddBotFromKeyboard(KeyboardEventArgs key)
    {
        if (key.Key.Equals("Enter"))
            AddBot();
    }

    private void AddBot()
    {
        if (!string.IsNullOrWhiteSpace(inputTokenBot))
            CheckerService.AddBot(inputTokenBot);
    }

    private object? selectedBot => selectedBotKey != null && CheckerService.Bots.TryGetValue(selectedBotKey, out var bot) ? bot : null;
}

<style>
    /* Таблица для разметки */
    .main-table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }

    .bots-column {
        width: 73%;
        vertical-align: top;
        padding-right: 20px;
    }

    .settings-column {
        width: 27%;
        vertical-align: top;
        padding-left: 20px;
    }

    /* Контейнер для ботов */
    .flex-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .flex-item {
        flex: 1 1 auto;
        min-width: 80px;
        max-width: 150px;
        background-color: white;
        border-radius: 8px;
        padding: 15px 10px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        font-size: 0.9rem;
        color: #111;
        position: relative;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }

        .flex-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 8px rgba(0,0,0,0.15);
        }

    .bot-info {
        margin-bottom: 10px;
        text-align: center;
        font-weight: 500;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .bot-name {
        word-wrap: break-word;
        word-break: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
        line-height: 1.2;
        font-size: 0.85rem;
        font-weight: 600;
        max-height: 2.4em;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .bot-status {
        font-size: 0.8rem;
        line-height: 1.1;
    }

    .bot-workload {
        font-size: 0.8rem;
        line-height: 1.1;
    }

    .btn-del {
        background-color: transparent;
        border: 1px solid #c0392b;
        color: #c0392b;
        border-radius: 4px;
        padding: 2px 8px;
        font-size: 0.8rem;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
        margin-top: auto;
    }

        .btn-del:hover {
            background-color: #c0392b;
            color: white;
        }

    /* Настройки справа */
    .settings-container {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 20px;
    }

    .settings-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
        align-self: flex-end;
    }

    .btn-action {
        background-color: #3498db;
        border: none;
        color: white;
        padding: 6px 14px;
        border-radius: 5px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-action:hover {
            background-color: #2980b9;
        }

    .setting-item {
        width: 100%;
        max-width: 280px;
        text-align: right;
    }

    .input-settings {
        margin: 0 0 5px 0;
        font-size: 0.85rem;
        color: #555;
        user-select: none;
    }

    .setting-item input {
        width: 100%;
        padding: 6px 8px;
        font-size: 0.9rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        transition: border-color 0.3s ease;
    }

        .setting-item input:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }

    /* Нижняя фиксированная панель */
    .fixed-bottom {
        position: fixed;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        width: 95%;
        max-width: 700px;
        display: flex;
        gap: 10px;
        background-color: #fff;
        padding: 10px 15px;
        border-radius: 8px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.12);
        box-sizing: border-box;
        z-index: 1000;
    }

    .input-token {
        flex-grow: 1;
        padding: 8px 12px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        transition: border-color 0.3s ease;
    }

        .input-token:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }

    .btn-add {
        background-color: #27ae60;
        border: none;
        color: white;
        padding: 8px 14px;
        border-radius: 5px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
        min-width: 70px;
    }

        .btn-add:hover {
            background-color: #1e8449;
        }

    .bots-column, .settings-column {
        width: 100%;
        padding: 0;
    }

    .settings-container {
        align-items: stretch;
    }

    .setting-item {
        text-align: left;
        max-width: 100%;
    }

    .fixed-bottom {
        flex-direction: column;
        gap: 8px;
        padding: 12px;
    }

    .btn-add {
        width: 100%;
        min-width: unset;
    }

    /* Стили для модального окна */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 24px 0;
        border-bottom: none;
    }

        .modal-header h3 {
            margin: 0;
            color: #333;
            font-size: 1.4rem;
        }

    .modal-close {
        background: none;
        border: none;
        font-size: 28px;
        cursor: pointer;
        color: #999;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .modal-close:hover {
            color: #666;
        }

    .modal-body {
        padding: 20px 24px;
    }

    .modal-input-group {
        margin-bottom: 20px;
    }

    .modal-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #555;
        font-size: 0.95rem;
    }

    .modal-input {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        box-sizing: border-box;
    }

        .modal-input:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding: 0 24px 20px;
    }

    .btn-cancel {
        background-color: #95a5a6;
    }

        .btn-cancel:hover {
            background-color: #7f8c8d;
        }

    .btn-save {
        background-color: #27ae60;
    }

        .btn-save:hover {
            background-color: #219653;
        }

    /* Адаптивность для мобильных устройств */
    @@media (max-width: 768px) {
        .main-table {
            display: block;
        }

        .bots-column, .settings-column {
            display: block;
            width: 100%;
            padding: 0;
        }

        .flex-item {
            min-width: 70px;
            max-width: 120px;
            padding: 12px 8px;
        }

        .bot-name {
            font-size: 0.8rem;
        }

        .bot-status, .bot-workload {
            font-size: 0.75rem;
        }
    }
</style>